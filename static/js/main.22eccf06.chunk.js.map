{"version":3,"sources":["components/TodoTemplate.js","TodoContext.js","components/TodoHead.js","components/TodoItem.js","components/TodoList.js","components/TodoCreate.js","App.js","serviceWorker.js","index.js"],"names":["TodoTemplateBlock","styled","div","TodoTemplate","children","initialTodos","id","text","done","todoReducer","state","action","type","concat","todo","map","filter","TodoStateContext","createContext","TodoDispatchContext","TodoNextIdContext","TodoProvider","useReducer","dispatch","nextId","useRef","Provider","value","useTodoState","context","useContext","Error","useTodoDispatch","TodoHeadBlock","today","Date","year","getFullYear","month","getMonth","date","getDate","week","Array","TodoHead","undoneTasks","className","getDay","length","Remove","TodoItemBlock","CheckCircle","props","css","Text","React","memo","onClick","TodoListBlock","TodoList","todos","key","CircleButton","button","open","InsertFormPositioner","InsertForm","form","Input","input","useState","setOpen","setValue","useTodoNextId","onSubmit","e","preventDefault","current","autoFocus","placeholder","onChange","target","GlobalStyle","createGlobalStyle","App","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister","catch","error","console","message"],"mappings":"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","file":"static/js/main.22eccf06.chunk.js","sourcesContent":["import React from 'react';\r\nimport styled from 'styled-components';\r\n\r\nconst TodoTemplateBlock = styled.div` /*Todo Box template css*/\r\n    width : 512px;\r\n    height : 768px;\r\n    \r\n    position : relative;\r\n    background : white;\r\n    border-radius :16px;\r\n    box-shadow 0 0 8px 0 rgba(0,0,0,0.04);    \r\n    margin : 0 auto;\r\n    margin-bottom: 32px;\r\n    margin-top:64px;\r\n    display : flex; /*flex : 수평요소(가로방향으로 배치, width만큼 차지)*/\r\n    flex-direction: column;\r\n`;\r\n\r\nfunction TodoTemplate({children}){\r\n    return <TodoTemplateBlock>{children}</TodoTemplateBlock>;\r\n}\r\n\r\nexport default TodoTemplate;\r\n","import React, { useReducer, createContext, useContext, useRef } from 'react';\r\n\r\nconst initialTodos = [\r\n  {\r\n    id: 1,\r\n    text: '공부하기',\r\n    done: true\r\n  },\r\n  {\r\n    id: 2,\r\n    text: '먹고놀기',\r\n    done: false\r\n  }\r\n];\r\n\r\nfunction todoReducer(state, action){ //action=업데이트를 위한 정보\r\n    switch(action.type){\r\n        case 'CREATE':\r\n            return state.concat(action.todo);\r\n        case 'TOGGLE':\r\n            return state.map(todo =>\r\n                todo.id === action.id ? {...todo, done: !todo.done}: todo);\r\n        case 'REMOVE':\r\n            return state.filter(todo => todo.id !== action.id);\r\n        dafault:\r\n            throw new Error(`Unhandled action type: ${action.type}`);\r\n    }\r\n}\r\nconst TodoStateContext = createContext();\r\nconst TodoDispatchContext = createContext();\r\nconst TodoNextIdContext = createContext();\r\n//dispatch 액션발생\r\nexport function TodoProvider({ children }) {\r\n  const [state, dispatch] = useReducer(todoReducer, initialTodos);\r\n  const nextId = useRef(5);\r\n\r\n  return (\r\n    <TodoStateContext.Provider value={state}>\r\n      <TodoDispatchContext.Provider value={dispatch}>\r\n        <TodoNextIdContext.Provider value={nextId}>\r\n          {children}\r\n        </TodoNextIdContext.Provider>\r\n      </TodoDispatchContext.Provider>\r\n    </TodoStateContext.Provider>\r\n  );\r\n}\r\n//nextID : 새 항목 추가 시 사용할 고유ID\r\nexport function useTodoState() {\r\n  const context = useContext(TodoStateContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoDispatch() {\r\n  const context = useContext(TodoDispatchContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}\r\n\r\nexport function useTodoNextId() {\r\n  const context = useContext(TodoNextIdContext);\r\n  if (!context) {\r\n    throw new Error('Cannot find TodoProvider');\r\n  }\r\n  return context;\r\n}","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\n\r\nconst TodoHeadBlock = styled.div`\r\n  padding-top: 48px;\r\n  padding-left: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 24px;\r\n  border-bottom: 1px solid #e9ecef;\r\n  h1 {\r\n    margin: 0;\r\n    font-size: 36px;\r\n    color: #343a40;\r\n  }\r\n  .day {\r\n    margin-top: 4px;\r\n    color: #868e96;\r\n    font-size: 21px;\r\n  }\r\n  .tasks-left {\r\n    color: #20c997;\r\n    font-size: 18px;\r\n    margin-top: 40px;\r\n    font-weight: bold;\r\n  }\r\n`;\r\nlet today = new Date();\r\nlet year = today.getFullYear(); // 년도\r\nlet month = today.getMonth() + 1;  // 월\r\nlet date = today.getDate();  // 날짜\r\nvar week = new Array('일','월','화','수','목','금','토')\r\n\r\nfunction TodoHead(){\r\n    const todos = useTodoState();\r\n    //console.log(todos);\r\n    const undoneTasks = todos.filter(todo => !todo.done);\r\n    return (\r\n    <TodoHeadBlock>\r\n        <h1>{year}년 {month}월 {date}일</h1>\r\n        <div className=\"day\">{week[today.getDay()]}요일</div>\r\n             <div className=\"tasks-left\">할 일 {undoneTasks.length}개 남음</div>\r\n        </TodoHeadBlock>\r\n    )\r\n}\r\n\r\nexport default TodoHead;","import React from 'react';\r\nimport styled, {css} from 'styled-components';\r\nimport {MdDone, MdDelete} from 'react-icons/md';\r\nimport { useTodoDispatch } from '../TodoContext';\r\n\r\nconst Remove = styled.div` /*삭제 기능*/\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center; /*가운데 정렬 (여백x)*/\r\n    color: #dee2e6;\r\n    font-size: 24px;\r\n    cursor: pointer;\r\n    &:hover {\r\n        color: #ff6b6b;\r\n  }\r\n    display: none;\r\n`;\r\nconst TodoItemBlock = styled.div`\r\n    display: flex;\r\n    align-items: center;\r\n    padding-top: 12px;\r\n    padding-bottom: 12px;\r\n    &:hover {\r\n    ${Remove} { /*hover시 삭제아이콘 표시*/\r\n        display: initial;\r\n    }\r\n  }\r\n`;\r\n\r\nconst CheckCircle = styled.div `\r\n    width: 32px;\r\n    height: 32px;\r\n    border-radius: 16px;\r\n    border: 1px solid #ced4da;\r\n    font-size: 24px;\r\n    display: flex;\r\n    align-items: center;\r\n    justify-content: center;\r\n    margin-right: 20px;\r\n    cursor: pointer;\r\n    ${props =>\r\n        props.done && /*체크 됐을 때*/\r\n        css`\r\n    border: 1px solid #38d9a9;\r\n    color: #38d9a9;\r\n    `}\r\n`;\r\n\r\nconst Text = styled.div`\r\n    flex: 1;\r\n    font-size: 21px;\r\n    color: #495057;\r\n    ${props =>\r\n    props.done && /*체크 됐을 때*/\r\n    css`\r\n        color: #ced4da;\r\n    `}\r\n`;\r\nfunction TodoItem({id, done, text}){\r\n    const dispatch = useTodoDispatch();\r\n    const onToggle = () => dispatch({ type: 'TOGGLE', id });\r\n    const onRemove = () => dispatch({ type: 'REMOVE', id });\r\n    return(\r\n         <TodoItemBlock>\r\n      <CheckCircle done={done} onClick={onToggle}>\r\n        {done && <MdDone />}\r\n      </CheckCircle>\r\n      <Text done={done}>{text}</Text>\r\n      <Remove onClick={onRemove}>\r\n        <MdDelete />\r\n      </Remove>\r\n    </TodoItemBlock>\r\n  );\r\n}\r\n\r\nexport default React.memo(TodoItem);\r\n//React.memo를 사용하면 다른 항목 업데이트 시, 불필요한 리렌더링을 방지할 수 있다 -> 성능 최적화","import React from 'react';\r\nimport styled from 'styled-components';\r\nimport TodoItem from './TodoItem';\r\nimport { useTodoState } from '../TodoContext';\r\n\r\nconst TodoListBlock = styled.div`\r\n  flex: 1; /*flex 아이템 기본 크기*/\r\n  padding: 20px 32px;\r\n  padding-bottom: 48px;\r\n  overflow-y: auto;\r\n\r\n`;\r\n\r\nfunction TodoList(){\r\n    const todos = useTodoState();\r\n    \r\n    return (\r\n        <TodoListBlock>\r\n            {todos.map(todo => (\r\n             <TodoItem           \r\n             key={todo.id}\r\n             id={todo.id}\r\n             text={todo.text}\r\n             done={todo.done} />\r\n             ))}\r\n            </TodoListBlock>\r\n);\r\n}\r\n//반복함수 map으로 배열 출력\r\nexport default TodoList;","import React, {useState} from 'react';\r\nimport styled, { css } from 'styled-components';\r\nimport { MdAdd } from 'react-icons/md';\r\nimport { useTodoDispatch, useTodoNextId } from '../TodoContext';\r\n\r\nconst CircleButton = styled.button`\r\n  background: #38d9a9;\r\n  &:hover {\r\n    background: #63e6be;\r\n  }\r\n  &:active {\r\n    background: #20c997;\r\n  }\r\n  z-index: 5;\r\n  cursor: pointer;\r\n  width: 80px;\r\n  height: 80px;\r\n  display: block;\r\n  align-items: center;\r\n  justify-content: center;\r\n  font-size: 60px;\r\n  position: absolute;\r\n  left: 50%;\r\n  bottom: 0px;\r\n  transform: translate(-50%, 50%);\r\n  color: white;\r\n  border-radius: 50%;\r\n  border: none;\r\n  outline: none;\r\n  display: flex;\r\n  align-items: center;\r\n  justify-content: center;\r\n  transition: 0.125s all ease-in;\r\n  ${props =>\r\n    props.open &&\r\n    css`\r\n      background: #ff6b6b;\r\n      &:hover {\r\n        background: #ff8787;\r\n      }\r\n      &:active {\r\n        background: #fa5252;\r\n      }\r\n      transform: translate(-50%, 50%) rotate(45deg);/*click시 45도 회전*/\r\n    `}\r\n`;\r\n\r\nconst InsertFormPositioner = styled.div` /*입력 form*/\r\n  width: 100%;\r\n  bottom: 0;\r\n  left: 0;\r\n  position: absolute;\r\n`;\r\n\r\nconst InsertForm = styled.form`\r\n  background: #f8f9fa;\r\n  padding-left: 32px;\r\n  padding-top: 32px;\r\n  padding-right: 32px;\r\n  padding-bottom: 72px;\r\n\r\n  border-bottom-left-radius: 16px;\r\n  border-bottom-right-radius: 16px;\r\n  border-top: 1px solid #e9ecef;\r\n`;\r\n\r\nconst Input = styled.input`\r\n  padding: 12px;\r\n  border-radius: 4px;\r\n  border: 1px solid #dee2e6;\r\n  width: 100%;\r\n  outline: none;\r\n  font-size: 18px;\r\n  box-sizing: border-box;\r\n`;\r\n\r\nfunction TodoCreate() {\r\n  const [open, setOpen] = useState(false);\r\n  const [value, setValue] = useState('');\r\n  const dispatch = useTodoDispatch();\r\n  const nextId = useTodoNextId();\r\n  const onToggle = () => setOpen(!open);\r\n  const onChange = e => setValue(e.target.value);\r\n  const onSubmit = e => { //새로운 항목 추가하는 액션 dispacth\r\n    e.preventDefault(); // 새로고침 방지\r\n    dispatch({\r\n      type: 'CREATE',\r\n      todo: {\r\n        id: nextId.current,\r\n        text: value, //value 초기화, open값 false\r\n        done: false\r\n      }\r\n    });\r\n    setValue('');\r\n    setOpen(false);\r\n    nextId.current += 1;\r\n  };\r\n\r\n  return (\r\n    <>\r\n      {open && (\r\n        <InsertFormPositioner>\r\n          <InsertForm onSubmit={onSubmit}>\r\n            <Input\r\n              autoFocus\r\n              placeholder=\"할 일을 입력 후, Enter 를 누르세요\"\r\n              onChange={onChange}\r\n              value={value}\r\n            />\r\n          </InsertForm>\r\n        </InsertFormPositioner>\r\n      )}\r\n      <CircleButton onClick={onToggle} open={open}>\r\n        <MdAdd />\r\n      </CircleButton>\r\n    </>\r\n  );\r\n}\r\n\r\nexport default React.memo(TodoCreate);","import React from 'react';\nimport { createGlobalStyle } from 'styled-components';\nimport TodoTemplate from './components/TodoTemplate';\nimport TodoHead from './components/TodoHead';\nimport TodoList from './components/TodoList';\nimport TodoCreate from './components/TodoCreate';\nimport { TodoProvider } from './TodoContext';\n\nconst GlobalStyle = createGlobalStyle`\n  body {\n    background: #e9ecef;\n  }\n`;\n\nfunction App() {\n  return (\n   <TodoProvider>\n      <GlobalStyle />\n      <TodoTemplate>\n      <TodoHead />\n      <TodoList />\n      <TodoCreate />\n      </TodoTemplate>\n    </TodoProvider>\n  );\n}\n\nexport default App;","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}